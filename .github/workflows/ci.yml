name: test & build & push

on:
  workflow_dispatch:
    inputs:
      docker-image-version:
        type: string
        description: input image version
        required: true
        default: latest

jobs:
  test_build_push:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.19' ]
        postgres-version: [ '12' ]
        postgres-dbname: [ 'postgres' ]
        postgres-host: [ 'localhost' ]
        postgres-user: [ 'postgres' ]
        postgres-password: [ 'postgres' ]

    services:
      db:
        image: postgres:${{ matrix.postgres-version }}
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ matrix.postgres-user }}
          POSTGRES_PASSWORD: ${{ matrix.postgres-password }}
          POSTGRES_DB: ${{ matrix.postgres-dbname }}
        options:
          --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 5

    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v2

      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Run go fmt
        if: runner.os != 'Windows'
        run: diff -u <(echo -n) <(gofmt -d -s .)

      - name: Run go vet
        run: go vet ./...
        
      - name: Run go test
        run: |
          go test -v ./...

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build And Push ECR
        run: |
          docker build -t terraform-ecs-fargate-spot .
          docker tag terraform-ecs-fargate-spot:latest ${{ secrets.AWS_ECR_REGISTRY_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/dev-terraform-ecs-fargate-spot-ecr:${{ inputs.docker-image-version }}
          docker push ${{ secrets.AWS_ECR_REGISTRY_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/dev-terraform-ecs-fargate-spot-ecr:${{ inputs.docker-image-version }}